paste
find_overlap()
ls
from test_stats import *
from teststats import *
find_overlap()
data = find_overlap()
halo = np.random.choice(range(len(data)))
halo
halo = np.random.choice(range(len(data)))
halo
data[0][0]
data[0][1]
data[1][1]
data
data[6][1]
data[6][1][22]
data[6][1][21]
truth = mk_catalog(data[6][1][21])
import h5py as hdf
f = hdf.File('../data/truth/Aardvark_v1.0c_truth_des_rotated.65.hdf5')
dset = f[f.keys()[0]]
f.keys()
f = hdf.File('../data/truth/Aardvark_v1.0c_truth_des_rotated.65.hdf5', 'r')
f.keys()
f
f.attrs
f.attrs()
f.name
f.keys
f.keys()
data
f = hdf.File('../data/truth/Aardvark_v1.0c_truth_des_rotated.86.hdf5', 'r')
dset = f[f.keys()[0]]
result_part = dset['RA', 'DEC', 'Z']
len(result_part)
x = where(result_part['Z'] < 0.5)
result = result_part[x[0]]
len(result)
result[:10]
result['RA'].max()
result['RA'].min()
rp = result[:10000]
from sklearn.cluster import MeanShift
from mpl_toolkits.mplot3d import Axes3D
ms = Meanshift()
ms = MeanShift()
from sklearn.datasets.samples_generator import make_blobs
centers = [[1,1,1],[5,5,5],[3,10,10]]
X, _ = make_blobs(n_samples = 500, centers = centers, cluster_std = 1.5)
X
x.shape
X.shape
rp.shape
rp2 = np.reshape(rp,(10000,3))
rp
hstack?
rp2 = hstack([rp['RA'], rp['DEC'], rp['Z']])
rp2.shape
rp2
make_blobs?
rp2 = np.reshape(np.ravel(rp), (10000,3))
ms.fit(rp)
Meanshift?
MeanShift?
MeanShift.fit?
X[0]
rp = result[:3000]
rp2 = np.reshape(rp,(1000,3))
ms.fit(rp2)
rp2
rp2[0]
rp2 = array(rp)
rp2
rp2 = hstack([rp['RA'], rp['DEC'], rp['Z']])
rp2
rp2.shape
rp2 = np.reshape(rp2,(1000,3))
rp2 = np.reshape(np.ravel(rp), (1000,3))
rp2
rp = result[:3000]
rp
X
rp.shape
X.shape
rp2 = np.reshape(rp,(1000,3))
rp2.shape
ms.fit(rp2)
make_blobs?
rp2 = np.reshape(rp,(3000,1))
rp2
ms.fit(rp2)
rp = result[:30]
rp
rp2 = np.reshape(rp,(30,1))
rp2
ms.fit(rp2)
rp2.dtype = []
rp2
rp = result[:30]
rp2 = np.reshape(rp,(30,1))
rp2
rp2.dtype=[float, float, float]
rp2.dtype=[np.float, np.float, np.float]
rp = rp.view(np.float32).reshape(rp.shape+(-1,))
rp
rp2 = np.reshape(rp,(30,1))
rp.shape
ms.fit(rp)
rp = result[:30]
rp.view(float, len(rp.dtype.names)))
rp.view(float, len(rp.dtype.names))
rp.view(np.float64, len(rp.dtype.names))
rp.view((np.float64, len(rp.dtype.names)))
rp.view((float, len(rp.dtype.names)))
rp=np.array(rp.tolist())
rp
rp.shape
ms.fit(rp)
labels = ms.labels_
cluster_centers = ms.cluster_centers_
cluster_centers
len(rp)
fig = figure()
ax= fig.add_subplot(111,projection='3d')
for i in range(len(rp)):
    ax.scatter(rp[i][0], rp[i][1], rp[i][2], c=colors[labels[i]])
colors = 10*['r','g','b','c','k','y','m']
for i in range(len(rp)):
    ax.scatter(rp[i][0], rp[i][1], rp[i][2], c=colors[labels[i]])
draw()
paste
draw()
fig = figure()
ax= fig.add_subplot(111,projection='3d')
for i in range(len(rp)):
    ax.scatter(rp[i][0], rp[i][1], rp[i][2], c=colors[labels[i]])
paste
draw()
rp = result[:3000]
rp = np.array(rp.tolist())
ms.fit(rp)
labels = ms.labels_
cluster_centers = ms.cluster_centers_
fig = figure()
ax= fig.add_subplot(111,projection='3d')
paste
draw()
for i in range(len(rp)):
    ax.scatter(rp[i][0], rp[i][1], rp[i][2], c=colors[labels[i]])
draw()
from sklearn.cluster import DBSCAN
db = DMSCAN(eps=0.1, min_samples=10).fit(rp)
db = DBSCAN(eps=0.1, min_samples=10).fit(rp)
paste
n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)
n_clusters_
# Black removed and is used for noise instead.
unique_labels = set(labels)
colors = plt.cm.Spectral(np.linspace(0, 1, len(unique_labels)))
for k, col in zip(unique_labels, colors):
    if k ==-1:
        col = 'k'
   class_member_mask = (labels==k)
   xy = X[class_member_mask & core_samples_mask]
   scatter(xy[:,0], xy[:,1], xy[:,2], facecolor=col)
   xy = X[class_member_mask & ~core_samples_mask]
   scatter(xy[:,0], xy[:,1], xy[:,2], facecolor='k')
for k, col in zip(unique_labels, colors):
    if k ==-1:
        col = 'k'
    class_member_mask = (labels==k)
    xy = X[class_member_mask & core_samples_mask]
    scatter(xy[:,0], xy[:,1], xy[:,2], facecolor=col)
    xy = X[class_member_mask & ~core_samples_mask]
    scatter(xy[:,0], xy[:,1], xy[:,2], facecolor='k')
xy
for k, col in zip(unique_labels, colors):
    if k ==-1:
        col = 'k'
    class_member_mask = (labels==k)
    xy = rp[class_member_mask & core_samples_mask]
    scatter(xy[:,0], xy[:,1], xy[:,2], facecolor=col)
    xy = rp[class_member_mask & ~core_samples_mask]
    scatter(xy[:,0], xy[:,1], xy[:,2], facecolor='k')
fig = figure(2)
ax= fig.add_subplot(111,projection='3d')
for k, col in zip(unique_labels, colors):
    if k ==-1:
        col = 'k'
    class_member_mask = (labels==k)
    xy = rp[class_member_mask & core_samples_mask]
    ax.scatter(xy[:,0], xy[:,1], xy[:,2], facecolor=col)
    xy = rp[class_member_mask & ~core_samples_mask]
    ax.scatter(xy[:,0], xy[:,1], xy[:,2], facecolor='k')
draw()
n_clusters_
tight_layout()
xlabel('RA')
ylabel('DEC')
zlabel('z')
ax.set_zlabel('z')
draw()
tight_layout()
history
